name: cd

on:
  pull_request:
    types:
      - closed
  workflow_dispatch:

jobs:
  build:
    if: github.event.pull_request.merged == true
    name: Build and Push Docker Image
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push tg_bot_reminder Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:latest
          build-args: |
            NODE_ENV=${{ vars.NODE_ENV }}
            LOCALE=${{ vars.LOCALE }}
            BOT_API_KEY=${{ vars.BOT_API_KEY }}
            DATABASE_HOST=${{ vars.DATABASE_HOST }}
            DATABASE_PORT=${{ vars.DATABASE_PORT }}
            DATABASE_USER=${{ vars.DATABASE_USER }}
            DATABASE_PASSWORD=${{ vars.DATABASE_PASSWORD }}
            DATABASE_NAME=${{ vars.DATABASE_NAME }}
            DATABASE_URL=${{ vars.DATABASE_URL }}

  deploy:
    if: github.event.pull_request.merged == true
    name: Deploy using Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} > ~/.ssh/known_hosts

      - name: Debug vars
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}"
          echo "REPOSITORY_NAME=${{ secrets.REPOSITORY_NAME }}"

      - name: Deploy Docker Container
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          NODE_ENV: ${{ vars.NODE_ENV }}
          LOCALE: ${{ vars.LOCALE }}
          BOT_API_KEY: ${{ vars.BOT_API_KEY }}
          DATABASE_HOST: ${{ vars.DATABASE_HOST }}
          DATABASE_PORT: ${{ vars.DATABASE_PORT }}
          DATABASE_USER: ${{ vars.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ vars.DATABASE_NAME }}
          DATABASE_URL: ${{ vars.DATABASE_URL }}
          REPOSITORY_NAME: ${{ secrets.REPOSITORY_NAME }}
        run: |
          ssh -T ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << EOF

          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

          docker container rm -f tg_reminder || true

          docker system prune -a -f

          docker pull $DOCKER_USERNAME/$REPOSITORY_NAME:latest

          docker run -d --restart unless-stopped --name tg_reminder -e NODE_ENV=$NODE_ENV -e LOCALE=$LOCALE -e BOT_API_KEY=$BOT_API_KEY -e DATABASE_HOST=$DATABASE_HOST -e DATABASE_PORT=$DATABASE_PORT -e DATABASE_USER=$DATABASE_USER -e DATABASE_PASSWORD=$DATABASE_PASSWORD -e DATABASE_NAME=$DATABASE_NAME -e DATABASE_URL=$DATABASE_URL $DOCKER_USERNAME/$REPOSITORY_NAME:latest

          docker exec -it tg_reminder sh -c "npm run migrate:prod && exit"

          EOF
